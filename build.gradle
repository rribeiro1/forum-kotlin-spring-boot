buildscript {
	ext {
		kotlinVersion = '1.3.41'
		springBootVersion = '2.2.3.RELEASE'
	}
	repositories {
		mavenCentral()
		jcenter()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")
	}
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'kotlin-jpa'
apply plugin: "kotlin-allopen"
apply plugin: 'kotlin-kapt'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'

group = 'br.com.alura'
sourceCompatibility = 1.8
compileKotlin {
	kotlinOptions {
		freeCompilerArgs = ['-Xjsr305=strict']
		jvmTarget = '1.8'
	}
}
compileTestKotlin {
	kotlinOptions {
		freeCompilerArgs = ['-Xjsr305=strict']
		jvmTarget = '1.8'
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation("org.springframework.boot:spring-boot-starter-web")
	implementation("org.springframework.boot:spring-boot-starter-data-jpa")
	implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
	implementation("org.jetbrains.kotlin:kotlin-reflect")
	implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
	implementation("org.springframework.boot:spring-boot-starter-cache")
	implementation("org.springframework.boot:spring-boot-starter-security")
	implementation("org.springframework.boot:spring-boot-starter-actuator")
	implementation("io.jsonwebtoken:jjwt:0.9.1")
	implementation("io.springfox:springfox-swagger2:2.9.2")
	implementation("io.springfox:springfox-swagger-ui:2.9.2")
	runtime("org.springframework.boot:spring-boot-devtools")
	runtime("com.h2database:h2")
	testImplementation('io.rest-assured:rest-assured:4.0.0')
	testImplementation('io.rest-assured:json-path:4.0.0')
	testImplementation('io.rest-assured:xml-path:4.0.0')
	testImplementation("org.springframework.boot:spring-boot-starter-test")
	testImplementation "io.mockk:mockk:1.9.3"
	testImplementation "com.ninja-squad:springmockk:1.1.2"
	testImplementation('org.junit.jupiter:junit-jupiter-api:5.5.1')
	testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.3.2')
}

jacoco {
	toolVersion = "0.8.2"
}

jacocoTestReport {
	group = "Reporting"
	reports {
		xml.enabled = true
		csv.enabled = false
		html.destination file("${buildDir}/reports/coverage")
	}
}

task jacocoFixForCodeClimate(type: Copy) {
	from 'build/reports/jacoco/test/jacocoTestReport.xml'
	into 'build/reports/jacoco/test/'
	rename { String fileName ->
		fileName.replace("jacocoTestReport.xml", "jacoco.xml")
	}
	filter { line -> line.replaceAll("br/com/", "src/main/kotlin/br/com/") }
}
